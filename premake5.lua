VULKAN_SDK = os.getenv("VULKAN_SDK")
IncludeDir = {}
IncludeDir["VulkanSDK"] = "%{VULKAN_SDK}/Include"

LibraryDir = {}
LibraryDir["VulkanSDK"] = "%{VULKAN_SDK}/Lib"

Library = {}
Library["Vulkan"] = "%{LibraryDir.VulkanSDK}/vulkan-1.lib"
Library["VulkanUtils"] = "%{LibraryDir.VulkanSDK}/VkLayer_utils.lib"

-- premake5.lua
-- The name of your workspace will be used, for example, to name the Visual Studio .sln file generated by Premake.
workspace "PuduRenderer"
	-- We indicate that all the projects are C++ only
	language "C++"

	-- We will compile for x86_64. You can change this to x86 for 32 bit builds.
	architecture "x86_64"

	-- Configurations are often used to store some compiler / linker settings together.
    -- The Debug configuration will be used by us while debugging.
    -- The optimized Release configuration will be used when shipping the app.
	configurations { "Debug", "Release" }

	-- We use filters to set options, a new feature of Premake5.

	-- We now only set settings for the Debug configuration
	filter { "configurations:Debug" }
		-- We want debug symbols in our debug config
		symbols "On"

	-- We now only set settings for Release
	filter { "configurations:Release" }
		-- Release should be optimized
		optimize "On"

	-- Reset the filter for other settings
	filter { }

	-- Here we use some "tokens" (the things between %{ ... }). They will be replaced by Premake
	-- automatically when configuring the projects.
	-- * %{prj.name} will be replaced by "ExampleLib" / "App" / "UnitTests"
	--  * %{cfg.longname} will be replaced by "Debug" or "Release" depending on the configuration
	-- The path is relative to *this* folder
	targetdir ("Build/Bin/%{prj.name}/%{cfg.longname}")
	objdir ("Build/Obj/%{prj.name}/%{cfg.longname}")

function includeAndLinkDxc()
	includedirs "lib/dxc/include"

	libdirs "lib/dxc/lib"
	
end

function includeStb_Image()
	includedirs "lib/stb"
end

function includeGLFW()
   includedirs "lib/GLFW/include"
end

function includedxc()
	includedirs "lib/dxc/include"
end

function linkdxc()
	libdirs "lib/dxc/Lib"

	-- Our static lib should not link against GLFW
	filter "kind:not StaticLib"
	   links "dxcompiler"
	filter {}
end

function includeTinyObjLoader()
	includedirs "lib/tiny_obj_loader/**"
	includedirs "lib/tiny_obj_loader"
	defines {"TINYOBJLOADER_IMPLEMENTATION"}
end
-- This function links statically against GLFW
function linkGLFW()
   libdirs "lib/GLFW/Lib"

   -- Our static lib should not link against GLFW
   filter "kind:not StaticLib"
      links "glfw3"
   filter {}
end

project "PuduCore"
	kind "StaticLib"
	language "C++"
	targetdir "bin/%{cfg.buildcfg}"
	cppdialect "C++20"

	files "Projects/PuduCore/**"
	includedirs "Projects/PuduCore/lib"

	includeGLFW()
	includedxc()
	includeStb_Image()
	includeTinyObjLoader()

	includedirs 
	{
   		"%{IncludeDir.VulkanSDK}"
	}

-- This function includes GLFW's header files

function includeVulkan()
	includedirs "%{IncludeDir.VulkanSDK}"
end

function useCoreLib()
	-- The library's public headers
	includedirs "Projects/PuduCore/lib"

	-- We link against a library that's in the same workspace, so we can just
	-- use the project name - premake is really smart and will handle everything for us.
	links "PuduCore"

	linkGLFW()
	linkdxc()

   filter { "system:windows" }
		
end

-- The windowed app
project "App"
	kind "ConsoleApp"
	files "Projects/App/**"
	includedirs "Projects/App/lib"
	cppdialect "C++20"
	-- We also need the headers
   -- We also need the headers
	includeGLFW()
	includeVulkan()
	useCoreLib()
	includeStb_Image()
	libdirs { "C:/VulkanSDK/1.3.268.0/Lib" }
	links "vulkan-1"
	defines {"HLSLPP_FEATURE_TRANSFORM"}
	filter { "system:windows" }