VULKAN_SDK = os.getenv("VULKAN_SDK")
IncludeDir = {}
IncludeDir["VulkanSDK"] = "%{VULKAN_SDK}/Include"
IncludeDir["VulkanVMA"]= "%{VULKAN_SDK}/Include/vma"

LibraryDir = {}
LibraryDir["VulkanSDK"] = "%{VULKAN_SDK}/Lib"

Library = {}
Library["Vulkan"] = "%{LibraryDir.VulkanSDK}/vulkan-1.lib"
Library["VulkanUtils"] = "%{LibraryDir.VulkanSDK}/VkLayer_utils.lib"

-- premake5.lua
-- The name of your workspace will be used, for example, to name the Visual Studio .sln file generated by Premake.
workspace "PuduRenderer"
-- We indicate that all the projects are C++ only
language "C++"

-- We will compile for x86_64. You can change this to x86 for 32 bit builds.
architecture "x86_64"

-- Configurations are often used to store some compiler / linker settings together.
-- The Debug configuration will be used by us while debugging.
-- The optimized Release configuration will be used when shipping the app.
configurations {"Debug", "Release"}

-- We use filters to set options, a new feature of Premake5.

-- We now only set settings for the Debug configuration
filter {"configurations:Debug"}
-- We want debug symbols in our debug config
symbols "On"

-- We now only set settings for Release
filter {"configurations:Release"}
-- Release should be optimized
optimize "On"

-- Reset the filter for other settings
filter {}

-- Here we use some "tokens" (the things between %{ ... }). They will be replaced by Premake
-- automatically when configuring the projects.
-- * %{prj.name} will be replaced by "ExampleLib" / "App" / "UnitTests"
--  * %{cfg.longname} will be replaced by "Debug" or "Release" depending on the configuration
-- The path is relative to *this* folder
targetdir("Build/Bin/%{prj.name}/%{cfg.longname}")
objdir("Build/Obj/%{prj.name}/%{cfg.longname}")

function CppVer()
	cppdialect "C++latest"
end

function includeAndLinkDxc()
    includedirs "lib/dxc/include"

    libdirs "lib/dxc/lib"
end

function includeAndLinkFastGltf()
    includedirs {"lib/fastgltf/include", "lib/simdjson"}
    libdirs {"lib/fastgltf", "lib/simdjson"}
    links {"fastgltf", "simdjson"}
end

function includeBooling()
    includedirs{"lib/boolinq"}
end

function includeAndLinkSPIRV_Reflect()
    includedirs "lib/SPIRV-Reflect"
    libdirs "lib/SPIRV-Reflect"
    links "SPIRV-Reflect"
end

function includeStb_Image()
    includedirs "lib/stb"
end

function includeGLFW()
    includedirs "lib/GLFW/include"
end

function includedxc()
    includedirs "lib/dxc/include"
end

function includeAndLinkFmtlib()
    includedirs "lib/fmt/include"
    libdirs "lib/fmt/%{cfg.longname}"
    links {"fmtd"}
end

function linkdxc()
    libdirs "lib/dxc/Lib"

    -- Our static lib should not link against GLFW
    filter "kind:not StaticLib"
    links "dxcompiler"
    filter {}
end

function includeTinyObjLoader()
    includedirs "lib/tiny_obj_loader/**"
    includedirs "lib/tiny_obj_loader"
    -- defines {"TINYOBJLOADER_IMPLEMENTATION"}
end
-- This function links statically against GLFW
function linkGLFW()
    libdirs "lib/GLFW/Lib"

    -- Our static lib should not link against GLFW
    filter "kind:not StaticLib"
    links "glfw3"
    filter {}
end

function includeVulkan()
    includedirs {"%{IncludeDir.VulkanSDK}", "%{IncludeDir.VulkanVMA}"}
end

function useCoreLib()
    -- The library's public headers
    includedirs "Projects/PuduCore/lib"

    -- We link against a library that's in the same workspace, so we can just
    -- use the project name - premake is really smart and will handle everything for us.
    links "PuduCore"

    linkGLFW()
    linkdxc()
    includeAndLinkFmtlib()

    filter {"system:windows"}
end

function  targetDir()
    targetdir "bin/%{prj.name}/%{cfg.buildcfg}"
end

function FrameGraphProject()
    project "PuduFrameGraph"
    kind "StaticLib"
    language "C++"
    CppVer()
    targetDir()
    includePath = "Projects/PuduFrameGraph/include"
    srcPath = "Projects/PuduFrameGraph/src"
    files "Projects/%{prj.name}/**"
    includedirs {includePath}
    includeVulkan()
    os.mkdir(includePath)
    os.mkdir(srcPath)
end


--Dependencies projects
project "simdjson"
kind "StaticLib"
language "C++"
CppVer()
targetdir "lib/simdjson/%{cfg.buildcfg}"
objdir("lib/simdjson.dir/%{cfg.buildcfg}")
files "lib/simdjson/**"
includedirs "lib/simdjson"

project "fastgltf"
kind "StaticLib"
language "C++"
CppVer()
targetdir "lib/fastgltf/%{cfg.buildcfg}"
objdir("lib/fastgltf/fastgltf.dir/%{cfg.buildcfg}")
files "lib/fastgltf/src/**"
includedirs {"lib/fastgltf/include","lib/simdjson"}

links "simdjson"


project "SPIRV-Reflect"
kind "StaticLib"
language "C++"
CppVer()
targetdir "lib/SPIRV-Reflect/%{cfg.buildcfg}"
objdir("lib/SPIRV-Reflect/SPIRV-Reflect.dir/%{cfg.buildcfg}")
files "lib/SPIRV-Reflect/spirv_reflect.cpp"
includedirs {"lib/SPIRV-Reflect","include"}

--Projects
project "PuduCore"
kind "StaticLib"
language "C++"
CppVer()
targetDir()

files "Projects/PuduCore/**"
includedirs {"Projects/PuduCore/lib","Prjects/PuduCore/vendor"}

includeGLFW()
includedxc()
includeStb_Image()
includeTinyObjLoader()
includeAndLinkFastGltf()
includeAndLinkFmtlib()
includeAndLinkSPIRV_Reflect()
includeBooling()
includeVulkan()

vpaths {
    -- leave it empty to generate filters respecting the folder structure
}

project "App"

kind "ConsoleApp"
files "Projects/App/**"
includedirs "Projects/App/lib"
CppVer()
includeGLFW()
includeVulkan()
useCoreLib()
includeStb_Image()
includeTinyObjLoader()
includeAndLinkFastGltf()
libdirs {"C:/VulkanSDK/1.3.268.0/Lib"}
links "vulkan-1"
defines {"HLSLPP_FEATURE_TRANSFORM"}
debugdir "$(ProjectDir)Build/Bin/$(ProjectName)/%{cfg.longname}"
